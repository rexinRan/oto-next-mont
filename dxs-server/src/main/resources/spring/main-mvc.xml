<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
		<!-- Enable annotation component scanning and autowiring of web package -->

    <context:annotation-config/>
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<!-- 加载controller的时候,不加载service,因为此时事物并未生效,若此时加载了service,那么事物无法对service进行拦截 -->
	<context:component-scan base-package="com.buss.*,org.jweb.*,com.alipay.*,com.tencent.*">
		<context:exclude-filter type="annotation"
				expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"/>
	<!-- 使用@Controller注释启用基于注释的控制器  -->
    <bean id="annotationUrlMapping"  class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>

<!--     <bean id="annotationMethodHandlerAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>  -->

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="cacheSeconds" value="0" />
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
		<property name="webBindingInitializer">
			<bean class="org.jweb.core.web.interceptor.MyWebBinding" />
		</property>
	</bean>
	<!-- 默认的视图解析器 在上边的解析错误时使用  该视图解析器永远都不会返回空视图对象，一般应该放在视图链最后位置，- -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="3">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<!-- <property name="prefix" value="/webpage/" /> -->
		<!-- 设置ModelAndView访问路径 -->
		<!--<property name="prefix" value="/WEB-INF/page/" />-->
		<property name="prefix" value="/" />

		<property name="suffix" value=".jsp" />
		<!-- 视图解析器在视图链中的优先级，0表示最高 -->
<!-- 		<property name="order" value="1"/> -->
	</bean>
	
	<!-- 该解析器不是视图解析器，是用于上传文件request解析的解析器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8">
		<property name="maxUploadSize">
			<!--<value>104857600</value>-->
			<value>404491093</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
	<!-- 方言 -->
	<bean id="dialect" class="org.jweb.core.query.hibernate.dialect.DialectFactoryBean">
		<property name="dbType" value="${jdbc.dbType}" />
	</bean>
	<!-- 异常处理类 该类实际和下面的org.springframework.web.servlet.handler.SimpleMappingExceptionResolver是
		同一种类型，只是SimpleMappingExceptionResolver是spring默认实现的，而MyExceptionHandler是自定义的，在运行时，spring
		会遍历调用全部HandlerExceptionResolver类型的bean来逐个处理
		
		注意，在web.xml中配置的ExceptionFilter是控制在整个web工程级别的，而这里的异常处理类是控制在spring级别的，如果在spring级别把
		异常处理了，在ExceptionFilter中是捕获不到的。
	-->
<!-- 	<bean id="exceptionHandler" -->
<!-- 		class="org.jweb.core.web.exception.MyExceptionHandler" /> -->
	<!-- 系统错误转发配置[并记录错误日志] -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="500"></property>   <!-- 默认为500，系统错误(error.jsp) -->
		<property name="defaultStatusCode" value="404"></property>
		<property name="statusCodes"><!-- 配置多个statusCode -->
			<props>
				<prop key="error">500</prop>  <!-- error.jsp -->
				<prop key="error1">404</prop>    <!-- error1.jsp -->
			</props>
		</property>
		<property name="exceptionMappings">
			<props>
				<!-- 这里你可以根据需要定义N多个错误异常转发 -->
				<prop key="java.sql.SQLException">dbError</prop> <!-- 数据库错误(dbError.jsp) -->
				<prop key="org.springframework.web.bind.ServletRequestBindingException">bizError</prop> <!-- 参数绑定错误(如：必须参数没传递)(bizError.jsp) -->
				<prop key="java.lang.IllegalArgumentException">bizError</prop>  <!-- 参数错误(bizError.jsp) -->
				<prop key="org.springframework.validation.BindException">bizError</prop>  <!-- 参数类型有误(bizError.jsp) -->
				<prop key="org.apache.shiro.authz.AuthorizationException">common/error/authError</prop>  <!-- 参数类型有误(bizError.jsp) -->
				<prop key="org.apache.shiro.authz.UnauthorizedException">common/error/authError</prop>  <!-- 参数类型有误(bizError.jsp) -->
				<prop key="java.lang.Exception">common/error/unknowError</prop>  <!-- 其他错误为'未定义错误'(unknowError.jsp) -->
			</props>
		</property>
	</bean>
	<!-- 拦截器 -->
	<mvc:interceptors>

		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="org.jweb.core.web.interceptor.EncodingInterceptor" />
		</mvc:interceptor>
		
	</mvc:interceptors>

	<!--<aop:aspectj-autoproxy  proxy-target-class="true" />-->
</beans>